program: run.py
method: bayes
metric:
  goal: maximize
  name: reward/phase2_eval

parameters:
  agent.lr:
    min: 0.0002
    max: 0.01
  agent.policy_lr:
    min: 0.0002
    max: 0.01
  agent.updates_per_step:
    values: [1]
  agent.td_target_update_interval:
    values: [1]
  agent.explore_method:
    values: ["null"]
  agent.exploit_method:
    values: ["sfgpi"]
  agent.rma:
    values: [True]
  agent.use_continuity_loss:
    values: [True]
  agent.continuity_coeff:
    min: 0.00005
    max: 0.005
  agent.use_imitation_loss:
    values: [True]
  agent.imitation_coeff:
    min: 0.01
    max: 10.0
  agent.lr_schedule:
    values: [True, False]
  env.task.adaptive_task:
    values: [False]
  agent.norm_task_by_sf:
    values: [False]
  agent.use_decoder:
    values: [True, False]
  agent.policy_net_kwargs.resnet:
    values: [True]
  agent.policy_net_kwargs.fta:
    values: [True]
  agent.policy_net_kwargs.layernorm:
    values: [True]
  agent.sf_net_kwargs.resnet:
    values: [True]
  agent.sf_net_kwargs.fta:
    values: [True]
  agent.sf_net_kwargs.layernorm:
    values: [True]
  buffer.framestacked_replay:
    values: [True]
  buffer.stack_size:
    values: [5, 10]
  env.num_envs:
    values: [1024]
  env.task.domain_rand:
    values: [False]
  env.task.taskSet_train:
    values: ["achievable"] # "redundant"
  env.task.taskSet_eval:
    values: ["achievable"]

command:
  - ${env}
  - python
  - ${program}
  - agent=RMACOMPBLIMP
  - env=BlimpRand